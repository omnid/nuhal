#+TITLE: Northwestern Utilities and Hardware Abstraction Layer (nuhal)
* Introduction
An assortment of C utilities and hardware abstractions that work on multiple platforms including x86 PC's and microcontrollers.  
One day this library could be more generically useful, but currently it is developed according to the needs of the ~omnid~ robot project.

* Main Features
0. Works on x86 Linux and tiva microcontrollers 
1. UART serial library with code to lower the default latency of FTDI USB to serial converters and to use RS-485 serial devices on linux.
   - Only some fixed baud rates are supported, but they are added on an as-needed basis 
   - It is also possible to set the default FTDI latency with udev rules
2. Lock-free single-producer single-consumer queue
3. CMake utilities
   - Exposing git information at compile time via generated header files
   - Compile flags that I like can (optionally) be carried over by linking with the library
     - Extra warnings, strict standard compliance, and modern C and C++ standards
   - Basic CMake options that I find useful
     - Prevent in-source builds
     - Set a default build type (for single-configuration generators)
       
4. Flexible error handling code.  Designed to immediately terminate program while preserving debugging information.
5. A PID controller implementation
6. Generic interface for doing math with multi-turn encoders
7. Static assertions for C code
8. Serialization library
9. Functions for handling time.
10. Red/Green/Blue LED control that convert to print statements on a host pc
11. Redistribute catch.hpp unit testing framework for use in other projects
* Installation
** With ROS
0. Install [[https://github.com/m-elwin/tiva-cmake][tiva-cmake]] or clone it into your workspace
1. Clone this repository in your workspace
2. Use an isolated build tool (anything other than ~catkin_make~ such as ~catkin_make_isolated~)
** Without ROS
0. Install [[https://github.com/m-elwin/tiva-cmake][tiva-cmake]] if you wish to use ~nuhal_tiva~
1. Clone the repository
   #+BEGIN_SRC bash
   git clone https://github.com/m-elwin/nuhal
   cd nuhal
   #+END_SRC
2. Build and install ~nuhal_all~, code that is common to all platforms.
   #+BEGIN_SRC bash
   cmake -B nuhal_all/build nuhal_all 
   cmake --build nuhal_all/build
   cmake --build nuhal_all/build install
   #+END_SRC
5. Build and install the desired platform-specific libraries (~nuhal_<platform>~) of your choice.
   #+BEGIN_SRC bash
   cmake -B nuhal_linux/build nuhal_linux 
   cmake --build nuhal_linux/build
   cmake --build nuhal_linux/build --target install
   #+END_SRC
6. To run the unit tests
   #+BEGIN_SRC bash
   cmake --build nuhal_all/build/ --target test
   #+END_SRC
7. When generating the build-system (~cmake -B ...~) for ~nuhal_all~ you can set an install prefix by passing ~-DCMAKE_INSTALL_PREFIX=$INSTALL_DIR~, causing
   the project to be installed to ~$INSTALL_DIR~. You should then specify ~-DCMAKE_PREFIX_PATH=$INSTALL_DIR~ when generating the build-system for the platform specific libraries.
* Usage
- Use ~find_package(nuhal)~ then add ~nuhal::nuhal~ to the ~target_link_libraries~
  - This will auto-detect your platform based on the toolchain, host, and cross-compiling status
  - Includes some useful CMake Functions (see comments in [[nuhal_all/nuhal.cmake]] for details.
    - ~nuhal_defaults(type)~ Sets a default build type and calls
      - ~nuhal_set_default_build_type(type)~ Sets the default build type to ~type~ for single-configuration generators
      - ~nuhal_disable_in_source_builds()~ Requires that the cmake build is in a separate directory from the source tree (to avoid polluting the source with a bunch of cmake-generated files)
      - ~nuhal_no_lang_extensions()~ Disables C and C++ language extensions, forcing strict conformance to the standard.
    - ~nuhal_install(name findable)~ install a target with the given name, and set findable to TRUE if you want others to find it with find_package and need to write some
                                     additional cmake files (see [[nuhal_all/nuhal.cmake)]].
- If you would like to not add the default compile flags that ~nuhal::nuhal~ uses,  use ~nuhal::nuhal_noflags~ instead
- If you would like to link against a platform-specific version, use ~nuhal::nuhal_<platform>~. Flags are not included
- If you would like to use just the flags, add ~nuhal::nuhal_flags~ to ~target_link_libraries~

** Adding a Platform
1. Create a new subdirectory called ~nuhal_platform~
2. Use ~nuhal/nuhal_linux/CMakeLists.txt~ as a guide for the CMakeLists.txt file
3. If you need to support cross-compiling, use ~nuhal/nuhal_tiva/PreLoad.txt~ as a guide
   for setting a default cross compiler
4. Update ~/nuhal/nuhal_all/nuhal-config.cmake.in~ to make it aware of your new library.
   When a user does a ~find_package(nuhal)~ it is this file that is called and it is
   its responsibility to select the appropriate default ~nuhal~ library based on
   the platform and toolchain
   
