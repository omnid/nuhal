#+TITLE: Northwestern Utilities and Hardware Abstraction Layer (nuhal)
* Introduction
An assortment of C utilities and hardware abstractions that work on multiple platforms including x86 PC's and microcontrollers.  
One day this library could be more generically useful, but currently it is developed according to the needs of the ~omnid~ robot project.

* Main Features
0. Works on x86 Linux and tiva microcontrollers 
1. UART serial library with code to lower the default latency of FTDI USB to serial converters and to use RS-485 serial devices on linux.
   - Only some fixed baud rates are supported, but they are added on an as-needed basis 
   - It is also possible to set the default FTDI latency with udev rules
2. Lock-free single-producer single-consumer queue
3. CMake utilities
   - Exposing git information at compile time via generated header files
   - Compile flags that I like can (optionally) be carried over by linking with the library
     - Extra warnings, strict standard compliance, and modern C and C++ standards
   - Basic CMake options that I find useful
     - Prevent in-source builds
     - Set a default build type (for single-configuration generators)
       
4. Flexible error handling code.  Designed to immediately terminate program while preserving debugging information.
5. A PID controller implementation
6. Generic interface for doing math with multi-turn encoders
7. Static assertions for C code
8. Serialization library
9. Functions for handling time.
10. Red/Green/Blue LED control that convert to print statements on a host pc
11. Redistribute catch.hpp unit testing framework for use in other projects
* Installation
1. Clone the repository
   #+BEGIN_SRC bash
   git clone https://github.com/m-elwin/nuhal
   cd nuhal
   #+END_SRC
2. Build, install, and test the code for linux:
   #+BEGIN_SRC bash
   cmake -B nuhal_linux/build nuhal_linux
   cmake --build nuhal_linux/build
   cmake --build nuhal_linux/build --target test
   #+END_SRC
3. Repeat the above steps for each platform you wish to compile for
   - Each platform is named ~nuhal_<platform>~
   - ~nuhal_all~ is the core of the library and compiles on all platforms

* Usage
- Use ~find_package(nuhal)~ then add ~nuhal~ to the ~target_link_libraries~
  - This will auto-detect your platform based on the toolchain, host, and cross-compiling status
- If you would like to not add the default compile flags that ~nuhal~ uses,  use ~nuhal_noflags~ instead
- If you would like to link against a platform-specific version, use ~nuhal_<platform>~. Flags are not included
- If you would like to use just the flags, add ~nuhal_flags~ to ~target_link_libraries~
