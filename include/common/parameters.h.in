#ifndef COMMON_PARAMETERS_INCLUDE_GUARD_H
#define COMMON_PARAMETERS_INCLUDE_GUARD_H
/// @brief store general parameters that are useful to the whole system
/// NOTE: this file has some parameters populated by cmake.
///   The variable values are defined in @see common/include/common/parameters.cmake
///   The variables defined in parameters.cmake are substituted into
///   This file, to create parameters.h, which is then included as normal
///   This allows ROS urdf generation from xacro using the same
///   physical parameters as those defined in this file.
///   The substitution from cmake is:  @VAR_NAME@ in this file gets
///   the value of VAR_NAME from cmake
#include "common/utilities.h"
#include "common/matrix.h"

//// Physical parameters of the delta robot.  Actual values are substituted
//// From the values defined in parameters.cmake
/// Units are in kilograms and meters, and SI

/// radius of the circle where the lower joints connect to the
#define PARAMETERS_DELTA_BASE_RADIUS  @DELTA_BASE_RADIUS@f

/// thickness of the base plate
#define PARAMETERS_DELTA_BASE_THICKNESS @DELTA_BASE_THICKNESS@f

/// mass of the base plate
#define PARAMETERS_DELTA_BASE_MASS @DELTA_BASE_MASS@f

/// height of the joint axis above the center of the base plate
#define PARAMETERS_DELTA_BASE_OFFSET @DELTA_BASE_OFFSET@f

/// radius of the end-effector platform
#define PARAMETERS_DELTA_PLATFORM_RADIUS @DELTA_PLATFORM_RADIUS@f

/// thickness of the end-effector platform
#define PARAMETERS_DELTA_PLATFORM_THICKNESS @DELTA_PLATFORM_THICKNESS@f

/// mass of the end-effector platform
#define PARAMETERS_DELTA_PLATFORM_MASS @DELTA_PLATFORM_MASS@f

/// length of the lower leg (this is cnced from a block of aluminum)
#define PARAMETERS_DELTA_LOWER_LEG_LENGTH @DELTA_LOWER_LEG_LENGTH@f

/// length of the upper leg (this is made from aluminum tubes)
#define PARAMETERS_DELTA_UPPER_LEG_LENGTH @DELTA_UPPER_LEG_LENGTH@f

// mass of the lower leg, in kg
#define DELTA_LOWER_LEG_MASS @DELTA_LOWER_LEG_MASS@f

// distance from the lower leg joint to its center of mass, in m
#define DELTA_LOWER_LEG_CENTER_OF_MAS @DELTA_LOWER_LEG_CENTER_OF_MASS@f

///// ------ END CMAKE defined parameters


/// @brief joint limits for the arm angle
#define PARAMETERS_ARM_MIN_RAD DEGREES_TO_RADIANS(0.0f)
#define PARAMETERS_ARM_MAX_RAD DEGREES_TO_RADIANS(80.0f)

/// @brief maximum velocity of the arm
#define PARAMETERS_ARM_MAX_RAD_SEC 10.0f

// amps of current,
// actual max is 6
#define PARAMETERS_ARM_MAX_CURRENT 6.0f
/// @brief workspace limits, in m.  origin is at the center of the base
/// so limits are x (-PARAMETERS_WORK_X_MM,LIMIT_WORK_X_M)
/// so limits are y (-PARAMETERS_WORK_Y_MM,LIMIT_WORK_Y_M)
/// so limits are y (-PARAMETERS_WORK_Z_MIN_MM,LIMIT_WORK_Z_MAX_M)
#define PARAMETERS_WORK_X_M 0.100f
#define PARAMETERS_WORK_Y_M 0.100f
#define PARAMETERS_WORK_Z_MIN_M 0.20f
#define PARAMETERS_WORK_Z_MAX_M 0.45f




/// height of the calibration fixture (m), from the drive axes to the axes
/// of the joints connected to the platform
#define PARAMETERS_CALIBRATION_FIXTURE_HEIGHT 0.2809875f

/// mass of the robot above the spring, in kg, excluding the gimbal
#define PARAMETERS_CALIBRATION_SPRUNG_MASS 0.9f

/// max wheel speed is 285 rpm - corresponds to sending a data byte of '127'
#define PARAMETERS_WHEEL_MAX_SPEED 127u

/// soft max speed for safe operation of the robot (4Pi rad/sec = 120rpm)
#define PARAMETERS_WHEEL_VEL_SOFT_MAX 4.0f*PI

/// Frequencies for some control loop

/// @brief joint control loop in hz. The speed of this loop is limited
/// by the speed of the motor firmware.
/// it can take up to 2 ms to get a response for
/// a motor command.  It could be possible to circumvent this limitation by
/// not waiting for the response; however, the commands would then fill the
/// motor's queue and be buffered, which does not help much
#define PARAMETERS_JOINT_CONTROL_HZ 800u

/// @brief frequency of the control loop on the main delta controller
#define PARAMETERS_DELTA_CONTROL_LOOP_HZ 100u

/// @brief wheel control loop in hz.
#define PARAMETERS_WHEEL_CONTROL_LOOP_HZ 400u

/// @brief omni control loop in hz.
#define PARAMETERS_OMNI_CONTROL_LOOP_HZ 100u

/// @brief Mobile base configuration (units are in m)
#define PARAMETERS_OMNI_WHEEL_RADIUS 0.1016f
#define PARAMETERS_OMNI_LENGTH 0.2064f
#define PARAMETERS_OMNI_WIDTH 0.2159f

// @brief spring consant in Nm/radian. See spring_calibrate and
// spring_independent_calibrate.nb
#define PARAMETERS_SPRING_CONSTANT 17.0f

/// The hard stop on the gimbal's X and y axis, in radians
#define PARAMETERS_GIMBAL_XY_STOP 0.6674

// the hard stop on the gimbal's z axis, in radians
#define PARAMETERS_GIMBAL_Z_STOP 0.35377
#endif
